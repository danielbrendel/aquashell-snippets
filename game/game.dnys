# Space Shooter Game

require "array";
require "auto";
require "dx.window";
require "dx.graphics";
require "dx.sound";
require "strings";

const WND_RES_X int <= 800;
const WND_RES_Y int <= 600;
const INVALID_DX_HANDLE int <= -1;
const KEY_UP int <= 38;
const KEY_LEFT int <= 37;
const KEY_RIGHT int <= 39;
const KEY_DOWN int <= 40;
const KEY_SPACE int <= 32;
const PLAYER_ATTACK_RATE int <= 500;
const GLOBAL_VOLUME int <= 10;
const BORDER_BARS int <= 200;

global szScriptPath string;
global bDxValid bool;
global hDefFont int;
global hPlayerSprite int;
global szPlayerAttributes string;
global iCalcPlayerXPos int;
global iCalcPlayerYPos int;
global bMayShoot bool;
global hSndAttack int;
global hSndHit int;
global hSndBoom int;

array arrPlayerBullets string 0 ();
array arrAsteroids string 0 ();
array arrExplosions string 0 ();

getscriptpath szScriptPath;

set iCalcPlayerXPos <= %WND_RES_X;
set iCalcPlayerYPos <= %WND_RES_Y;

/= iCalcPlayerXPos 2;

-= iCalcPlayerXPos 50;
-= iCalcPlayerYPos 135;

set szPlayerAttributes <= "health:100,score:0,xpos:%iCalcPlayerXPos,ypos:%iCalcPlayerYPos";

set bMayShoot <= true;

function queryAttrValue string(szAttributes string, szKey string)
{
	result "";

	s_tokenize "%szAttributes" "," arrTokens;
	
	for (i, 0, %arrTokens.count, -inc) {
		s_tokenize "%arrTokens[%i]" ":" arrKeyValue;
		
		if (%arrKeyValue.count, -eq, 2) {
			if ("%arrKeyValue[0]", -eq, "%szKey") {
				result "%arrKeyValue[1]";
			};
		};
		
		s_cleartokens arrKeyValue;
	};
	
	s_cleartokens arrTokens;
};

function storeAttrValue string(szAttributes string, szKey string, szValue string)
{
	local szOldValue string;
	local szOldPair string;
	local szNewAttributes string;

	result "";
	
	call queryAttrValue("%szAttributes", "%szKey") => szOldValue;
	if (%szOldValue, -nt, "") {
		set szOldPair <= "%szKey:%szOldValue";
		set szNewAttributes <= "%szAttributes";
		
		s_replace szNewAttributes "%szOldPair" "%szKey:%szValue";
		
		result "%szNewAttributes";
	};
};

function spawnBullet void(xpos int, ypos int)
{
	local szBulletPair string;
	local hBulletSprite int;
	
	dx.gfx.loadsprite "%szScriptPath/assets/sprites/laser.bmp" 1 8 42 1 false hBulletSprite;
	
	set szBulletPair <= "handle:%hBulletSprite,xpos:%xpos,ypos:%ypos,dispose:0";
	
	item_append arrPlayerBullets "%szBulletPair";
};

function handleBullets void()
{
	local iBulletXPos int;
	local iBulletYPos int;
	local hBulletSprite int;
	local szQueryValue string;
	local szBulletPair string;
	
	for (iterator, 0, %arrPlayerBullets.length, -inc) {
		call queryAttrValue("%arrPlayerBullets[%iterator]", "handle") => szQueryValue;
		set hBulletSprite <= %szQueryValue;
		
		call queryAttrValue("%arrPlayerBullets[%iterator]", "xpos") => szQueryValue;
		set iBulletXPos <= %szQueryValue;
		
		call queryAttrValue("%arrPlayerBullets[%iterator]", "ypos") => szQueryValue;
		set iBulletYPos <= %szQueryValue;
		
		-= iBulletYPos 10;
		
		call storeAttrValue("%arrPlayerBullets[%iterator]", "ypos", %iBulletYPos) => szBulletPair;
		store_item_to_array szBulletPair arrPlayerBullets %iterator;
		
		dx.gfx.drawsprite %hBulletSprite %iBulletXPos %iBulletYPos 0 0.0 0.0 false 0 0 0 0;
	};
};

function disposeBullet void()
{
	local szQueryValue string;
	local iBulletYPos int;
	
	call queryAttrValue("%arrPlayerBullets[0]", "ypos") => szQueryValue;
	set iBulletYPos <= %szQueryValue;
	
	if (%iBulletYPos, -lse, -25) {
		item_remove arrPlayerBullets 0;
	};
};

function spawnAsteroid void()
{
	local szAsteroidPair string;
	local hAsteroidSprite int;
	local iRandomAst int;
	local iRandomPos int;
	local iRandomSpeed int;
	local iBarPos int;
	
	set iBarPos <= %WND_RES_X;
	-= iBarPos %BORDER_BARS;
	-= iBarPos 64;
	
	random 0 4 iRandomAst; ++ iRandomAst;
	random %BORDER_BARS %iBarPos iRandomPos;
	random 0 4 iRandomSpeed; ++ iRandomSpeed;
	
	if (%iRandomPos, -ls, %BORDER_BARS) {
		set iRandomPos <= %BORDER_BARS;
	};
	
	dx.gfx.loadsprite "%szScriptPath/assets/sprites/asteroid%iRandomAst.png" 1 64 64 1 false hAsteroidSprite;
	
	set szAsteroidPair <= "handle:%hAsteroidSprite,xpos:%iRandomPos,ypos:-25,speed:%iRandomSpeed,dispose:0";
	
	item_append arrAsteroids "%szAsteroidPair";
};

function handleAsteroids void()
{
	local iAsteroidXPos int;
	local iAsteroidYPos int;
	local hAsteroidSprite int;
	local iAsteroidSpeed int;
	local szQueryValue string;
	local szAsteroidPair string;
	
	for (iterator, 0, %arrAsteroids.length, -inc) {
		call queryAttrValue("%arrAsteroids[%iterator]", "handle") => szQueryValue;
		set hAsteroidSprite <= %szQueryValue;
		
		call queryAttrValue("%arrAsteroids[%iterator]", "xpos") => szQueryValue;
		set iAsteroidXPos <= %szQueryValue;
		
		call queryAttrValue("%arrAsteroids[%iterator]", "ypos") => szQueryValue;
		set iAsteroidYPos <= %szQueryValue;
		
		call queryAttrValue("%arrAsteroids[%iterator]", "speed") => szQueryValue;
		set iAsteroidSpeed <= %szQueryValue;
		
		+= iAsteroidYPos %iAsteroidSpeed;
		
		call storeAttrValue("%arrAsteroids[%iterator]", "ypos", %iAsteroidYPos) => szAsteroidPair;
		store_item_to_array szAsteroidPair arrAsteroids %iterator;
		
		dx.gfx.drawsprite %hAsteroidSprite %iAsteroidXPos %iAsteroidYPos 0 0.0 0.0 false 0 0 0 0;
	};
};

function tmrMayShoot_OnElapsed bool()
{
	set bMayShoot <= true;
	
	result true;
};

function tmrSpawnAsteroid_OnElapsed bool()
{
	call spawnAsteroid() => void;
	
	result true;
};

function DXWND_OnCreate void(hWnd int)
{
    local bGfxInit bool;

    print "Window handle: %hWnd";

    dx.gfx.initialize %hWnd true %WND_RES_X %WND_RES_Y 0 0 0 0 bGfxInit;
    dx.snd.initialize %hWnd;

    dx.gfx.loadfont "Verdana" 15 30 hDefFont;
    if (%hDefFont, -eq, %INVALID_DX_HANDLE) {
        print "Failed to load font!";
    };
	
	dx.gfx.setbgimage "%szScriptPath/assets/sprites/background.png";
	
	dx.gfx.loadsprite "%szScriptPath/assets/sprites/player.png" 1 93 101 1 false hPlayerSprite;
	if (%hPlayerSprite, -eq, %INVALID_DX_HANDLE) {
        print "Failed to load player sprite!";
    };
	
	aut_addtimer "tmrMayShoot" %PLAYER_ATTACK_RATE;
	aut_addtimer "tmrSpawnAsteroid" 2000;
	
	dx.snd.query "%szScriptPath/assets/sounds/attack.wav" hSndAttack;
	dx.snd.query "%szScriptPath/assets/sounds/hit.wav" hSndHit;
	dx.snd.query "%szScriptPath/assets/sounds/boom.wav" hSndBoom;
	
    print "DX.Graphics and DX.Sound initialized";
};

function DXWND_OnDraw void()
{
	local iBarXPos int;
	local szPlayerHealth string;
	local szPlayerScore string;
	local szPlayerXPos string;
	local szPlayerYPos string;
	
    dx.gfx.drawbegin;
	
	dx.gfx.drawfilledbox 0 0 %BORDER_BARS %WND_RES_Y 0 0 0 150;
	
	set iBarXPos <= %WND_RES_X;
	-= iBarXPos %BORDER_BARS;
	dx.gfx.drawfilledbox %iBarXPos 0 %BORDER_BARS %WND_RES_Y 0 0 0 150;
	
	call queryAttrValue("%szPlayerAttributes", "health") => szPlayerHealth;
	call queryAttrValue("%szPlayerAttributes", "score") => szPlayerScore;

	dx.gfx.drawstring %hDefFont "Health: %szPlayerHealth" 5 5 255 255 255 150;
    dx.gfx.drawstring %hDefFont "Score: %szPlayerScore" 5 35 255 255 255 150;
	
	call queryAttrValue("%szPlayerAttributes", "xpos") => szPlayerXPos;
	call queryAttrValue("%szPlayerAttributes", "ypos") => szPlayerYPos;
	
	dx.gfx.drawsprite %hPlayerSprite %szPlayerXPos %szPlayerYPos 0 0.0 0.0 false 0 0 0 0;
	
	call handleBullets() => void;
	call disposeBullet() => void;
	
	call handleAsteroids() => void;

    dx.gfx.drawend;
};

function DXWND_OnKeyInput void(vKey int, bDown bool, bCtrlHeld bool, bShiftHeld bool, bAltHeld bool)
{
	local szQueryValue string;
	local iPlayerXPos int;
	local iPlayerYPos int;
	local iBarPos int;

	if (%vKey, -eq, %KEY_UP) {
		call queryAttrValue("%szPlayerAttributes", "ypos") => szQueryValue;
		
		set iPlayerYPos <= %szQueryValue;
		-= iPlayerYPos 10;
		
		call storeAttrValue("%szPlayerAttributes", "ypos", %iPlayerYPos) => szPlayerAttributes;
	};
	
	if (%vKey, -eq, %KEY_LEFT) {
		call queryAttrValue("%szPlayerAttributes", "xpos") => szQueryValue;
		
		set iPlayerXPos <= %szQueryValue;
		
		if (%iPlayerXPos, -gr, %BORDER_BARS) {
			-= iPlayerXPos 10;
			call storeAttrValue("%szPlayerAttributes", "xpos", %iPlayerXPos) => szPlayerAttributes;
		};
	};
	
	if (%vKey, -eq, %KEY_RIGHT) {
		call queryAttrValue("%szPlayerAttributes", "xpos") => szQueryValue;
		
		set iPlayerXPos <= %szQueryValue;
		set iBarPos <= %WND_RES_X;
		
		-= iBarPos %BORDER_BARS;
		-= iBarPos 93;
		
		if (%iPlayerXPos, -ls, %iBarPos) {
			+= iPlayerXPos 10;
			call storeAttrValue("%szPlayerAttributes", "xpos", %iPlayerXPos) => szPlayerAttributes;
		};
	};
	
	if (%vKey, -eq, %KEY_DOWN) {
		call queryAttrValue("%szPlayerAttributes", "ypos") => szQueryValue;
		
		set iPlayerYPos <= %szQueryValue;
		+= iPlayerYPos 10;
		
		call storeAttrValue("%szPlayerAttributes", "ypos", %iPlayerYPos) => szPlayerAttributes;
	};
	
	if (%vKey, -eq, %KEY_SPACE) {
		if (%bMayShoot, -eq, true) {
			set bMayShoot <= false;
			
			call queryAttrValue("%szPlayerAttributes", "xpos") => szQueryValue;
			set iPlayerXPos <= %szQueryValue;
			+= iPlayerXPos 43;
			
			call queryAttrValue("%szPlayerAttributes", "ypos") => szQueryValue;
			set iPlayerYPos <= %szQueryValue;
			-= iPlayerYPos 5;
			
			call spawnBullet(%iPlayerXPos, %iPlayerYPos) => void;
			
			dx.snd.play %hSndAttack %GLOBAL_VOLUME;
		};
	};
};

function DXWND_OnMouseInput void(x int, y int, iMouseKey int, bDown bool, bCtrlHeld bool, bShiftHeld bool, bAltHeld bool)
{
};

function DXWND_OnDestroy void()
{
    print "Window destroyed";

    dx.gfx.release;
    dx.snd.release;
};

dx.wnd.set_event "OnCreate" DXWND_OnCreate;
dx.wnd.set_event "OnDraw" DXWND_OnDraw;
dx.wnd.set_event "OnKeyInput" DXWND_OnKeyInput;
dx.wnd.set_event "OnMouseInput" DXWND_OnMouseInput;
dx.wnd.set_event "OnDestroy" DXWND_OnDestroy;

dx.wnd.initialize "Space Shooter Game" %WND_RES_X %WND_RES_Y;

dx.wnd.is_valid bDxValid;

while (%bDxValid, -eq, true) {
	aut_calctimers;
    dx.wnd.process;
    dx.wnd.is_valid bDxValid;
};

dx.wnd.release;
